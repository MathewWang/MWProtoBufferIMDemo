// Generated by the protocol buffer compiler.  DO NOT EDIT!
//  Created by MathewWang on 15/6/4.
//  Copyright (c) 2015å¹´ Jiamian. All rights reserved.

#import "Respone.pb.h"

@implementation ResponeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ResponeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ResponseHeader ()
@property int32_t sid;
@property int32_t cid;
@property int32_t seqNo;
@property int32_t code;
@end

@implementation ResponseHeader

- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) value {
  hasSid_ = !!value;
}
@synthesize sid;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) value {
  hasCid_ = !!value;
}
@synthesize cid;
- (BOOL) hasSeqNo {
  return !!hasSeqNo_;
}
- (void) setHasSeqNo:(BOOL) value {
  hasSeqNo_ = !!value;
}
@synthesize seqNo;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (void) dealloc {
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sid = 0;
    self.cid = 0;
    self.seqNo = 0;
    self.code = 0;
  }
  return self;
}
static ResponseHeader* defaultResponseHeaderInstance = nil;
+ (void) initialize {
  if (self == [ResponseHeader class]) {
    defaultResponseHeaderInstance = [[ResponseHeader alloc] init];
  }
}
+ (ResponseHeader*) defaultInstance {
  return defaultResponseHeaderInstance;
}
- (ResponseHeader*) defaultInstance {
  return defaultResponseHeaderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSid) {
    return NO;
  }
  if (!self.hasCid) {
    return NO;
  }
  if (!self.hasSeqNo) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSid) {
    [output writeInt32:1 value:self.sid];
  }
  if (self.hasCid) {
    [output writeInt32:2 value:self.cid];
  }
  if (self.hasSeqNo) {
    [output writeInt32:3 value:self.seqNo];
  }
  if (self.hasCode) {
    [output writeInt32:4 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSid) {
    size += computeInt32Size(1, self.sid);
  }
  if (self.hasCid) {
    size += computeInt32Size(2, self.cid);
  }
  if (self.hasSeqNo) {
    size += computeInt32Size(3, self.seqNo);
  }
  if (self.hasCode) {
    size += computeInt32Size(4, self.code);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ResponseHeader*) parseFromData:(NSData*) data {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromData:data] build];
}
+ (ResponseHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseHeader*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromInputStream:input] build];
}
+ (ResponseHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseHeader*)[[[ResponseHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseHeader_Builder*) builder {
  return [[ResponseHeader_Builder alloc] init];
}
+ (ResponseHeader_Builder*) builderWithPrototype:(ResponseHeader*) prototype {
  return [[ResponseHeader builder] mergeFrom:prototype];
}
- (ResponseHeader_Builder*) builder {
  return [ResponseHeader builder];
}
@end

@interface ResponseHeader_Builder()
@property (retain) ResponseHeader* result;
@end

@implementation ResponseHeader_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ResponseHeader alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ResponseHeader_Builder*) clear {
  self.result = [[ResponseHeader alloc] init];
  return self;
}
- (ResponseHeader_Builder*) clone {
  return [ResponseHeader builderWithPrototype:result];
}
- (ResponseHeader*) defaultInstance {
  return [ResponseHeader defaultInstance];
}
- (ResponseHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseHeader*) buildPartial {
  ResponseHeader* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ResponseHeader_Builder*) mergeFrom:(ResponseHeader*) other {
  if (other == [ResponseHeader defaultInstance]) {
    return self;
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasSeqNo) {
    [self setSeqNo:other.seqNo];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseHeader_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSid:[input readInt32]];
        break;
      }
      case 16: {
        [self setCid:[input readInt32]];
        break;
      }
      case 24: {
        [self setSeqNo:[input readInt32]];
        break;
      }
      case 32: {
        [self setCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSid {
  return result.hasSid;
}
- (int32_t) sid {
  return result.sid;
}
- (ResponseHeader_Builder*) setSid:(int32_t) value {
  result.hasSid = YES;
  result.sid = value;
  return self;
}
- (ResponseHeader_Builder*) clearSid {
  result.hasSid = NO;
  result.sid = 0;
  return self;
}
- (BOOL) hasCid {
  return result.hasCid;
}
- (int32_t) cid {
  return result.cid;
}
- (ResponseHeader_Builder*) setCid:(int32_t) value {
  result.hasCid = YES;
  result.cid = value;
  return self;
}
- (ResponseHeader_Builder*) clearCid {
  result.hasCid = NO;
  result.cid = 0;
  return self;
}
- (BOOL) hasSeqNo {
  return result.hasSeqNo;
}
- (int32_t) seqNo {
  return result.seqNo;
}
- (ResponseHeader_Builder*) setSeqNo:(int32_t) value {
  result.hasSeqNo = YES;
  result.seqNo = value;
  return self;
}
- (ResponseHeader_Builder*) clearSeqNo {
  result.hasSeqNo = NO;
  result.seqNo = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (int32_t) code {
  return result.code;
}
- (ResponseHeader_Builder*) setCode:(int32_t) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (ResponseHeader_Builder*) clearCode {
  result.hasCode = NO;
  result.code = 0;
  return self;
}
@end

@interface ResponeMsg ()
@property (retain) ResponseHeader* header;
@property (retain) NSData* body;
@end

@implementation ResponeMsg

- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) value {
  hasHeader_ = !!value;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value {
  hasBody_ = !!value;
}
@synthesize body;
- (void) dealloc {
  self.header = nil;
  self.body = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.header = [ResponseHeader defaultInstance];
    self.body = [NSData data];
  }
  return self;
}
static ResponeMsg* defaultResponeMsgInstance = nil;
+ (void) initialize {
  if (self == [ResponeMsg class]) {
    defaultResponeMsgInstance = [[ResponeMsg alloc] init];
  }
}
+ (ResponeMsg*) defaultInstance {
  return defaultResponeMsgInstance;
}
- (ResponeMsg*) defaultInstance {
  return defaultResponeMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHeader) {
    return NO;
  }
  if (!self.hasBody) {
    return NO;
  }
  if (!self.header.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeader) {
    [output writeMessage:1 value:self.header];
  }
  if (self.hasBody) {
    [output writeData:2 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasHeader) {
    size += computeMessageSize(1, self.header);
  }
  if (self.hasBody) {
    size += computeDataSize(2, self.body);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ResponeMsg*) parseFromData:(NSData*) data {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromData:data] build];
}
+ (ResponeMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponeMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromInputStream:input] build];
}
+ (ResponeMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponeMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ResponeMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponeMsg*)[[[ResponeMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponeMsg_Builder*) builder {
  return [[ResponeMsg_Builder alloc] init];
}
+ (ResponeMsg_Builder*) builderWithPrototype:(ResponeMsg*) prototype {
  return [[ResponeMsg builder] mergeFrom:prototype];
}
- (ResponeMsg_Builder*) builder {
  return [ResponeMsg builder];
}
@end

@interface ResponeMsg_Builder()
@property (retain) ResponeMsg* result;
@end

@implementation ResponeMsg_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ResponeMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ResponeMsg_Builder*) clear {
  self.result = [[ResponeMsg alloc] init];
  return self;
}
- (ResponeMsg_Builder*) clone {
  return [ResponeMsg builderWithPrototype:result];
}
- (ResponeMsg*) defaultInstance {
  return [ResponeMsg defaultInstance];
}
- (ResponeMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponeMsg*) buildPartial {
  ResponeMsg* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ResponeMsg_Builder*) mergeFrom:(ResponeMsg*) other {
  if (other == [ResponeMsg defaultInstance]) {
    return self;
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponeMsg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponeMsg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ResponseHeader_Builder* subBuilder = [ResponseHeader builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setBody:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasHeader {
  return result.hasHeader;
}
- (ResponseHeader*) header {
  return result.header;
}
- (ResponeMsg_Builder*) setHeader:(ResponseHeader*) value {
  result.hasHeader = YES;
  result.header = value;
  return self;
}
- (ResponeMsg_Builder*) setHeaderBuilder:(ResponseHeader_Builder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (ResponeMsg_Builder*) mergeHeader:(ResponseHeader*) value {
  if (result.hasHeader &&
      result.header != [ResponseHeader defaultInstance]) {
    result.header =
      [[[ResponseHeader builderWithPrototype:result.header] mergeFrom:value] buildPartial];
  } else {
    result.header = value;
  }
  result.hasHeader = YES;
  return self;
}
- (ResponeMsg_Builder*) clearHeader {
  result.hasHeader = NO;
  result.header = [ResponseHeader defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (NSData*) body {
  return result.body;
}
- (ResponeMsg_Builder*) setBody:(NSData*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (ResponeMsg_Builder*) clearBody {
  result.hasBody = NO;
  result.body = [NSData data];
  return self;
}
@end

