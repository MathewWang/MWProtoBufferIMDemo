// Generated by the protocol buffer compiler.  DO NOT EDIT!
//  Created by MathewWang on 15/6/4.
//  Copyright (c) 2015å¹´ Jiamian. All rights reserved.
#import "Login.pb.h"

@implementation LoginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LoginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface LoginReq ()
@property (retain) NSString* userName;
@property int32_t password;
@end

@implementation LoginReq

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (void) dealloc {
  self.userName = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.password = 0;
  }
  return self;
}
static LoginReq* defaultLoginReqInstance = nil;
+ (void) initialize {
  if (self == [LoginReq class]) {
    defaultLoginReqInstance = [[LoginReq alloc] init];
  }
}
+ (LoginReq*) defaultInstance {
  return defaultLoginReqInstance;
}
- (LoginReq*) defaultInstance {
  return defaultLoginReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeInt32:2 value:self.password];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserName) {
    size += computeStringSize(1, self.userName);
  }
  if (self.hasPassword) {
    size += computeInt32Size(2, self.password);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LoginReq*) parseFromData:(NSData*) data {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data] build];
}
+ (LoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReq_Builder*) builder {
  return [[LoginReq_Builder alloc] init];
}
+ (LoginReq_Builder*) builderWithPrototype:(LoginReq*) prototype {
  return [[LoginReq builder] mergeFrom:prototype];
}
- (LoginReq_Builder*) builder {
  return [LoginReq builder];
}
@end

@interface LoginReq_Builder()
@property (retain) LoginReq* result;
@end

@implementation LoginReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[LoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginReq_Builder*) clear {
  self.result = [[LoginReq alloc] init];
  return self;
}
- (LoginReq_Builder*) clone {
  return [LoginReq builderWithPrototype:result];
}
- (LoginReq*) defaultInstance {
  return [LoginReq defaultInstance];
}
- (LoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginReq*) buildPartial {
  LoginReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LoginReq_Builder*) mergeFrom:(LoginReq*) other {
  if (other == [LoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 16: {
        [self setPassword:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (LoginReq_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (LoginReq_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (int32_t) password {
  return result.password;
}
- (LoginReq_Builder*) setPassword:(int32_t) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (LoginReq_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = 0;
  return self;
}
@end

@interface LoginRes ()
@property int32_t resCode;
@end

@implementation LoginRes

- (BOOL) hasResCode {
  return !!hasResCode_;
}
- (void) setHasResCode:(BOOL) value {
  hasResCode_ = !!value;
}
@synthesize resCode;
- (void) dealloc {
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.resCode = 0;
  }
  return self;
}
static LoginRes* defaultLoginResInstance = nil;
+ (void) initialize {
  if (self == [LoginRes class]) {
    defaultLoginResInstance = [[LoginRes alloc] init];
  }
}
+ (LoginRes*) defaultInstance {
  return defaultLoginResInstance;
}
- (LoginRes*) defaultInstance {
  return defaultLoginResInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResCode) {
    [output writeInt32:1 value:self.resCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasResCode) {
    size += computeInt32Size(1, self.resCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LoginRes*) parseFromData:(NSData*) data {
  return (LoginRes*)[[[LoginRes builder] mergeFromData:data] build];
}
+ (LoginRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRes*)[[[LoginRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginRes*) parseFromInputStream:(NSInputStream*) input {
  return (LoginRes*)[[[LoginRes builder] mergeFromInputStream:input] build];
}
+ (LoginRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRes*)[[[LoginRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginRes*)[[[LoginRes builder] mergeFromCodedInputStream:input] build];
}
+ (LoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRes*)[[[LoginRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRes_Builder*) builder {
  return [[LoginRes_Builder alloc] init];
}
+ (LoginRes_Builder*) builderWithPrototype:(LoginRes*) prototype {
  return [[LoginRes builder] mergeFrom:prototype];
}
- (LoginRes_Builder*) builder {
  return [LoginRes builder];
}
@end

@interface LoginRes_Builder()
@property (retain) LoginRes* result;
@end

@implementation LoginRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  //[super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[LoginRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginRes_Builder*) clear {
  self.result = [[LoginRes alloc] init];
  return self;
}
- (LoginRes_Builder*) clone {
  return [LoginRes builderWithPrototype:result];
}
- (LoginRes*) defaultInstance {
  return [LoginRes defaultInstance];
}
- (LoginRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginRes*) buildPartial {
  LoginRes* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LoginRes_Builder*) mergeFrom:(LoginRes*) other {
  if (other == [LoginRes defaultInstance]) {
    return self;
  }
  if (other.hasResCode) {
    [self setResCode:other.resCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResCode {
  return result.hasResCode;
}
- (int32_t) resCode {
  return result.resCode;
}
- (LoginRes_Builder*) setResCode:(int32_t) value {
  result.hasResCode = YES;
  result.resCode = value;
  return self;
}
- (LoginRes_Builder*) clearResCode {
  result.hasResCode = NO;
  result.resCode = 0;
  return self;
}
@end

